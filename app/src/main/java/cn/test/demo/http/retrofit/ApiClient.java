package cn.test.demo.http.retrofit;import java.io.IOException;import java.util.concurrent.TimeUnit;import cn.test.demo.http.interceptor.RewriteCacheControlInterceptor;import cn.test.demo.http.interceptor.LoggingInterceptor;import okhttp3.Interceptor;import okhttp3.OkHttpClient;import okhttp3.Request;import okhttp3.Response;import okhttp3.logging.HttpLoggingInterceptor;import retrofit2.Retrofit;import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;import retrofit2.converter.gson.GsonConverterFactory;/** * Created by Sam on  2021-12-06  17:02 * Describe: */public class ApiClient {    // 网络请求的超时时间    private RewriteCacheControlInterceptor mRewriteCacheControlInterceptor;    private LoggingInterceptor loggingInterceptor;    private static ApiClient instance;    private ApiHttpRequestService apiHttpRequestService;    private static OkHttpClient okHttpClientInstance;    private static final int CONNECT_TIME_OUT = 10;    private static final int READ_TIME_OUT = 30;    private static final int WRITE_TIME_OUT = 60;    private ApiClient() {        mRewriteCacheControlInterceptor = RewriteCacheControlInterceptor.getInstance();        loggingInterceptor = LoggingInterceptor.getInstance();    }    /**     * 获取单例     */    public static ApiClient getInstance() {        if (instance == null) {            synchronized (ApiClient.class) {                if (instance == null)                    instance = new ApiClient();            }        }        return instance;    }    public ApiHttpRequestService getApiDataService() {        if (apiHttpRequestService == null) {            apiHttpRequestService = createRetrofit().create(ApiHttpRequestService.class);        }        return apiHttpRequestService;    }    /**     * 创建 Retrofit     *     * @return     */    private Retrofit createRetrofit() {        Retrofit retrofit = new Retrofit.Builder()                .baseUrl(ApiConstants.API_HOST)                .client(getOkHttpClientInstance())                .addConverterFactory(GsonConverterFactory.create())                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())                .build();        return retrofit;    }    /**     * 单例OkHttpClient     */    private OkHttpClient getOkHttpClientInstance() {        if (okHttpClientInstance == null) {            synchronized (ApiClient.class) {                if (okHttpClientInstance == null) {                    OkHttpClient.Builder builder = new OkHttpClient().newBuilder();                    builder.addInterceptor(new Interceptor() {                        @Override                        public Response intercept(Chain chain) throws IOException {                            Request original = chain.request();                            Request request = original.newBuilder()                                    .header("lc-client", "android")                                    .method(original.method(), original.body())                                    .build();                            return chain.proceed(request);                        }                    }).connectTimeout(CONNECT_TIME_OUT, TimeUnit.SECONDS).                            readTimeout(READ_TIME_OUT, TimeUnit.SECONDS).                            writeTimeout(WRITE_TIME_OUT, TimeUnit.SECONDS);                    HttpLoggingInterceptor httpLoggingInterceptor = new HttpLoggingInterceptor();                    httpLoggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);                    builder.addInterceptor(httpLoggingInterceptor);                    builder.addNetworkInterceptor(mRewriteCacheControlInterceptor);                    builder.addInterceptor(mRewriteCacheControlInterceptor);                    builder.retryOnConnectionFailure(true);                    okHttpClientInstance = builder.build();                }            }        }        return okHttpClientInstance;    }}