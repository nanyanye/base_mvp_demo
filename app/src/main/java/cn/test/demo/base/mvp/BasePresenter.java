package cn.test.demo.base.mvp;import androidx.lifecycle.Lifecycle;import androidx.lifecycle.LifecycleObserver;import androidx.lifecycle.LifecycleOwner;import androidx.lifecycle.OnLifecycleEvent;/** * Created by Sam on  2021-12-06  15:25 * Describe: */public class BasePresenter<M extends IModel, V extends IView> implements IPresenter, LifecycleObserver {    private final String TAG = this.getClass().getSimpleName();    protected V mView;    protected M mModel;    /**     * 绑定view，一般在初始化中调用该方法     *     * @param view view     */    public void attachView(V view) {        this.mView = view;        onStart();    }    /**     * View是否绑定     *     * @return     */    public boolean isViewAttached() {        return mView != null;    }    @Override    public void onStart() {        //将 LifecycleObserver 注册给 LifecycleOwner 后 @OnLifecycleEvent 才可以正常使用        if (mView != null && mView instanceof LifecycleOwner) {            ((LifecycleOwner) mView).getLifecycle().addObserver(this);            if (mModel != null && mModel instanceof LifecycleObserver) {                ((LifecycleOwner) mView).getLifecycle().addObserver((LifecycleObserver) mModel);            }        }    }    @Override    public void onDestroy() {        this.mView = null;        if (mModel != null)            mModel.onDestroy();        this.mModel = null;        this.mView = null;    }    @OnLifecycleEvent(Lifecycle.Event.ON_DESTROY)    private void onDestroy(LifecycleOwner owner) {        owner.getLifecycle().removeObserver(this);    }}